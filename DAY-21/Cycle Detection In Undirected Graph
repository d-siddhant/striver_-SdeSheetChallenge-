//using dfs

bool dfs(vector<int> adj[], vector<int> &vis,int i,int parent){
     vis[i]=1;
      
    for(auto it:adj[i]){
        if(!vis[it]) {
            if(dfs(adj,vis,it,i)) return true;
        }
        else if(it!=parent) return true;
    }
        return false;
}
string cycleDetection (vector<vector<int>>& e, int n, int m)
{
    // Write your code here.
    int E=e.size();
    vector<int> adj[n+1];
    vector<int> vis(n+1,0);
    
    for(int i=0;i<E;i++){
        adj[e[i][0]].push_back(e[i][1]);
        adj[e[i][1]].push_back(e[i][0]);
    }
    
    for(int i=1;i<n;i++){
        if(!vis[i]){
            if(dfs(adj,vis,i,-1)) return "Yes";
        }
    }
    return "No";
}
