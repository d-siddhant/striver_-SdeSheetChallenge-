#include<bits/stdc++.h>
// void dfs(int i,vector<int> adj[],vector<int> &vis,stack<int> &st){
//     vis[i]=1;
//     for(auto it:adj[i]){
//         if(!vis[it]) dfs(it,adj,vis,st);
//     }
//     st.push(i);
//     return;
// }
vector<int> topologicalSort(vector<vector<int>> &e, int n, int E)  {
    vector<int> adj[n];
     vector<int> indeg(n,0);
    for(int i=0;i<E;i++){
        adj[e[i][0]].push_back(e[i][1]);
        indeg[e[i][1]]++;
    }
    queue<int> q;
    vector<int> v;
    for(int i=0;i<n;i++){
        if(indeg[i]==0) q.push(i);
    }
        
    while(!q.empty()){
         int node=q.front();
         q.pop();
         v.push_back(node);
        for(auto it:adj[node]){
            indeg[it]--;
            if(indeg[it]==0) q.push(it);
        }
    }
                
        
   
    return v;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
//     vector<int> adj[n];
//     for(int i=0;i<E;i++){
//         adj[e[i][0]].push_back(e[i][1]);
//     }
    
//     vector<int> vis(n,0);
//     vector<int> v;
//     stack<int> st;
//     for(int i=0;i<n;i++){
//         if(!vis[i]) dfs(i,adj,vis,st);
//     }
//     while(!st.empty()){
//         v.push_back(st.top());
//         st.pop();
//     }
//     return v;
}
